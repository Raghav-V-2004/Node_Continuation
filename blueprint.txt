my-react-app
   config
      db.js
   controllers
      blogController.js
   models
      blogModel.js
    src
       AddBlog.jsx
       App.css
       App.jsx
       ArticleCard.jsx
       Blog Detail.jsx
       EditBlog.jsx
       Feed.jsx
    server.js

this is the order of the file
Contents are as follows
db.js
// config/db.js
const mysql = require('mysql2');

// Create a connection to the database
const db = mysql.createConnection({
  host: 'localhost',
  user: 'root',  // Update with your MySQL user
  password: 'root',  // Update with your MySQL password
  database: 'blog_db',  // Update with your database name
});

db.connect((err) => {
  if (err) {
    console.error('Database connection failed:', err);
    process.exit(1); // Exit if DB connection fails
  }
  console.log('Connected to the database');
});

module.exports = db;
blogController.js
// controllers/blogController.js
const blogModel = require('../models/blogModel');

// Get all blogs
const getAllBlogs = async (req, res) => {
  try {
    const blogs = await blogModel.getAllBlogs();
    res.json(blogs);
  } catch (err) {
    res.status(500).json({ error: 'Failed to fetch blogs' });
  }
};

// Get a blog by ID
const getBlogById = async (req, res) => {
  const { id } = req.params;
  try {
    const blog = await blogModel.getBlogById(id);
    if (blog) {
      res.json(blog);
    } else {
      res.status(404).json({ message: 'Blog not found' });
    }
  } catch (err) {
    res.status(500).json({ error: 'Failed to fetch the blog' });
  }
};

// Create a new blog
const createBlog = async (req, res) => {
  const { title, author, content, date, image, likes, comments } = req.body;
  const newBlog = { title, author, content, date, image, likes, comments };
  try {
    const blog = await blogModel.createBlog(newBlog);
    res.status(201).json(blog);
  } catch (err) {
    res.status(500).json({ error: 'Failed to create the blog' });
  }
};

// Update an existing blog
const updateBlog = async (req, res) => {
  const { id } = req.params;
  const { title, author, content, date, image, likes, comments } = req.body;
  const updatedBlog = { title, author, content, date, image, likes, comments };
  try {
    const result = await blogModel.updateBlog(id, updatedBlog);
    if (result.affectedRows > 0) {
      res.json({ message: 'Blog updated' });
    } else {
      res.status(404).json({ message: 'Blog not found' });
    }
  } catch (err) {
    res.status(500).json({ error: 'Failed to update the blog' });
  }
};

// Delete a blog
const deleteBlog = async (req, res) => {
  const { id } = req.params;
  try {
    const result = await blogModel.deleteBlog(id);
    if (result.affectedRows > 0) {
      res.json({ message: 'Blog deleted' });
    } else {
      res.status(404).json({ message: 'Blog not found' });
    }
  } catch (err) {
    res.status(500).json({ error: 'Failed to delete the blog' });
  }
};

module.exports = {
  getAllBlogs,
  getBlogById,
  createBlog,
  updateBlog,
  deleteBlog,
};
blogModel.js
// models/blogModel.js
const db = require('../config/db');

// Get all blogs
const getAllBlogs = () => {
  return new Promise((resolve, reject) => {
    db.query('SELECT * FROM blogs', (err, results) => {
      if (err) reject(err);
      resolve(results);
    });
  });
};

// Get a blog by ID
const getBlogById = (id) => {
  return new Promise((resolve, reject) => {
    db.query('SELECT * FROM blogs WHERE id = ?', [id], (err, results) => {
      if (err) reject(err);
      resolve(results[0]);
    });
  });
};

// Create a new blog
const createBlog = (blog) => {
  const { title, author, content, date, image, likes, comments } = blog;
  return new Promise((resolve, reject) => {
    db.query(
      'INSERT INTO blogs (title, author, content, date, image, likes, comments) VALUES (?, ?, ?, ?, ?, ?, ?)',
      [title, author, content, date, image, likes, JSON.stringify(comments)],
      (err, result) => {
        if (err) reject(err);
        resolve({ id: result.insertId, ...blog });
      }
    );
  });
};

// Update a blog by ID
const updateBlog = (id, blog) => {
  const { title, author, content, date, image, likes, comments } = blog;
  return new Promise((resolve, reject) => {
    db.query(
      'UPDATE blogs SET title = ?, author = ?, content = ?, date = ?, image = ?, likes = ?, comments = ? WHERE id = ?',
      [title, author, content, date, image, likes, JSON.stringify(comments), id],
      (err, result) => {
        if (err) reject(err);
        resolve(result);
      }
    );
  });
};

// Delete a blog by ID
const deleteBlog = (id) => {
  return new Promise((resolve, reject) => {
    db.query('DELETE FROM blogs WHERE id = ?', [id], (err, result) => {
      if (err) reject(err);
      resolve(result);
    });
  });

};

module.exports = {
  getAllBlogs,
  getBlogById,
  createBlog,
  updateBlog,
  deleteBlog,
};
AddBlog.jsx
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';

function AddBlog() {
  const [title, setTitle] = useState('');
  const [author, setAuthor] = useState('');
  const [content, setContent] = useState('');
  const [date, setDate] = useState('');
  const [image, setImage] = useState(null); 
  const navigate = useNavigate();

  const handleImageChange = (e) => {
    const file = e.target.files[0];
    setImage(file); // Change to store file for backend upload
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    const newBlog = {
      title,
      author,
      content,
      date,
      image, // Send file as part of the form-data
    };

    try {
      const formData = new FormData();
      formData.append('title', title);
      formData.append('author', author);
      formData.append('content', content);
      formData.append('date', date);
      if (image) formData.append('image', image);

      // Send POST request to backend API
      await axios.post('http://localhost:5000/api/blogs', formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });

      navigate('/');
    } catch (error) {
      console.error('Error adding blog:', error);
    }
  };

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-4xl font-bold mb-6">Add a New Blog</h1>
      <form onSubmit={handleSubmit} className="bg-white p-6 rounded-md shadow-md">
        {/* Form inputs remain unchanged */}
        <button type="submit" className="px-4 py-2 bg-blue-500 text-white rounded-md">
          Add Blog
        </button>
      </form>
    </div>
  );
}

export default AddBlog;
App.jsx
import React from 'react';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import Feed from './Feed';
import AddBlog from './AddBlog';
import EditBlog from './EditBlog';
import BlogDetail from './BlogDetail';
import './App.css'
function App() {
  return (
    <Router>
      <Routes>
        <Route path="/" element={<Feed />} />
        <Route path="/add" element={<AddBlog />} />
        <Route path="/edit/:id" element={<EditBlog />} />
        <Route path="/blog/:id" element={<BlogDetail />} />
      </Routes>
    </Router>
  );
}

export default App;
ArticleCard.jsx

import React from 'react';

function ArticleCard({ title, description, author, date }) {
  return (
    <div className="p-6 bg-white border border-gray-200 rounded-lg shadow-lg hover:shadow-xl transition duration-300 ease-in-out transform hover:scale-105">
      <h3 className="text-2xl font-semibold text-gray-800 hover:text-blue-600 transition duration-200 ease-in-out">{title}</h3>
      <p className="text-sm text-gray-500 mt-1">{author} | {date}</p>
      <p className="mt-4 text-gray-700">{description}</p>

      {/* Optional: Add a "Read more" link */}
      <div className="mt-4">
        <button className="text-blue-500 hover:text-blue-700 font-semibold transition duration-200 ease-in-out">
          Read more
        </button>
      </div>
    </div>
  );
}

export default ArticleCard;
BlogDetail.jsx
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { FaThumbsUp, FaRegComment } from 'react-icons/fa';
import axios from 'axios';

function BlogDetail() {
  const { id } = useParams();
  const [blog, setBlog] = useState(null);
  const [likes, setLikes] = useState(0);
  const [comments, setComments] = useState([]);
  const [commentText, setCommentText] = useState('');
  const navigate = useNavigate();

  useEffect(() => {
    const fetchBlog = async () => {
      try {
        const response = await axios.get(`http://localhost:5000/api/blogs/${id}`);
        setBlog(response.data);
        setLikes(response.data.likes);
        setComments(response.data.comments || []);
      } catch (error) {
        console.error('Error fetching blog details:', error);
      }
    };

    fetchBlog();
  }, [id]);

  const handleLike = async () => {
    const newLikes = likes + 1;
    setLikes(newLikes);

    try {
      // Send PUT request to update likes
      await axios.put(`http://localhost:5000/api/blogs/${id}/like`, { likes: newLikes });
    } catch (error) {
      console.error('Error updating likes:', error);
    }
  };

  const handleCommentChange = (e) => setCommentText(e.target.value);

  const handleAddComment = async () => {
    if (commentText) {
      const newComments = [...comments, commentText];
      setComments(newComments);
      setCommentText('');

      try {
        // Send PUT request to update comments
        await axios.put(`http://localhost:5000/api/blogs/${id}/comment`, { comments: newComments });
      } catch (error) {
        console.error('Error adding comment:', error);
      }
    }
  };

  if (!blog) {
    return <div>Blog not found</div>;
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <h2 className="text-3xl font-bold">{blog.title}</h2>
      <p className="text-sm text-gray-500">{blog.author} | {blog.date}</p>
      <div className="mt-4 text-lg">{blog.content}</div>

      <div className="mt-6 flex items-center space-x-6">
        <div className="flex items-center">
          <FaThumbsUp className="text-blue-500 cursor-pointer" onClick={handleLike} />
          <span className="ml-2">{likes}</span>
        </div>
        <div className="flex items-center">
          <FaRegComment className="text-gray-500" />
          <span className="ml-2">{comments.length}</span>
        </div>
      </div>

      <div className="mt-6">
        <textarea
          value={commentText}
          onChange={handleCommentChange}
          className="w-full p-2 border rounded-md"
          placeholder="Add a comment"
        />
        <button onClick={handleAddComment} className="mt-2 px-4 py-2 bg-green-500 text-white rounded-md">
          Add Comment
        </button>
      </div>

      <div className="mt-6">
        <h3 className="text-2xl font-semibold">Comments:</h3>
        <ul>
          {comments.map((comment, index) => (
            <li key={index} className="mt-2">{comment}</li>
          ))}
        </ul>
      </div>

      <button 
        onClick={() => navigate(-1)} 
        className="mt-4 px-4 py-2 bg-gray-500 text-white rounded-md"
      >
        Go Back
      </button>
    </div>
  );
}

export default BlogDetail;
EditBlog.jsx
import React, { useState, useEffect } from 'react';
import { useNavigate, useParams } from 'react-router-dom';

function EditBlog() {
  const { id } = useParams();
  const navigate = useNavigate();

      
  const [blog, setBlog] = useState(null);
  useEffect(() => {
    const blogs = JSON.parse(localStorage.getItem('blogs')) || [];
    const currentBlog = blogs.find((blog) => blog.id === parseInt(id));
    setBlog(currentBlog);
  }, [id]);

  const handleSubmit = (e) => {
    e.preventDefault();

   
    const blogs = JSON.parse(localStorage.getItem('blogs')) || [];
    const updatedBlogs = blogs.map((b) =>
      b.id === blog.id ? { ...b, title: blog.title, content: blog.content } : b
    );
    localStorage.setItem('blogs', JSON.stringify(updatedBlogs));

    navigate('/');
  };

  if (!blog) return <div>Loading...</div>;

  return (
    <div className="container mx-auto px-6 py-8">
      <h1 className="text-4xl font-bold text-gray-800 mb-6">Edit Blog</h1>
      <form onSubmit={handleSubmit} className="bg-white p-6 rounded-lg shadow-lg transition-all duration-300 ease-in-out hover:shadow-2xl">
        <div className="mb-6">
          <label className="block text-sm font-medium text-gray-700">Title</label>
          <input
            type="text"
            className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
            value={blog.title}
            onChange={(e) => setBlog({ ...blog, title: e.target.value })}
          />
        </div>
        <div className="mb-6">
          <label className="block text-sm font-medium text-gray-700">Content</label>
          <textarea
            className="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
            value={blog.content}
            onChange={(e) => setBlog({ ...blog, content: e.target.value })}
          />
        </div>
        <button
          type="submit"
          className="px-6 py-3 bg-blue-500 text-white rounded-lg shadow-md hover:bg-blue-600 focus:outline-none focus:ring-4 focus:ring-blue-300 transition-all duration-200"
        >
          Save Changes
        </button>
      </form>
    </div>
  );
}

export default EditBlog;
Feed.jsx

import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import axios from 'axios';

function Feed() {
  const [blogs, setBlogs] = useState([]);

  useEffect(() => {
    // Fetch blogs from the backend API
    const fetchBlogs = async () => {
      try {
        const response = await axios.get('http://localhost:5000/api/blogs');
        setBlogs(response.data);
      } catch (error) {
        console.error('Error fetching blogs:', error);
      }
    };

    fetchBlogs();
  }, []);

  const handleDelete = async (id) => {
    const confirmDelete = window.confirm('Are you sure you want to delete this blog?');
    if (confirmDelete) {
      try {
        // Send DELETE request to backend
        await axios.delete(`http://localhost:5000/api/blogs/${id}`);
        setBlogs(blogs.filter((blog) => blog.id !== id)); // Update state after delete
      } catch (error) {
        console.error('Error deleting blog:', error);
      }
    }
  };

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-4xl font-bold">Blog Feed</h1>
      <div className="my-4">
        <Link to="/add" className="px-4 py-2 bg-blue-500 text-white rounded-md">Add New Blog</Link>
      </div>

      <div className="mt-6">
        {blogs.map((blog) => {
          return (
            <div key={blog.id} className="bg-white p-4 rounded-md shadow-lg mb-6">
              {blog.image && <img src={`http://localhost:5000/${blog.image}`} alt={blog.title} className="w-32 h-32 object-cover rounded-md mb-4" />}
              <h2 className="text-2xl font-semibold">{blog.title}</h2>
              <p className="text-sm text-gray-500">{blog.author} | {blog.date}</p>
              <p className="text-lg mt-2">{blog.content.substring(0, 150)}...</p>
              <div className="mt-4">
                <Link to={`/blog/${blog.id}`} className="text-blue-500 hover:text-blue-700">Read more</Link>
              </div>

              <div className="mt-4">
                <p>Likes: {blog.likes}</p>
                <p>Comments: {blog.comments.length}</p>
              </div>

              <div className="mt-4">
                <Link to={`/edit/${blog.id}`} className="px-4 py-2 bg-yellow-500 text-white rounded-md mr-4">Edit</Link>
                <button onClick={() => handleDelete(blog.id)} className="px-4 py-2 bg-red-500 text-white rounded-md">Delete</button>
              </div>
            </div>
          );
        })}
      </div>
    </div>
  );
}

export default Feed;

Is it right or i need to do any changes as i new to full stack project please help me how to run this project step by step manner and i need to crrate a db for this project too
